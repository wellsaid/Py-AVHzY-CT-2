#!/usr/bin/env python
import serial
import struct
import argparse
import time

# actions along with their description
actions = [ "list", "read" ]
action_descriptions = { "list" : "Show this list and exit", "read" : "Reads energy value from the meter" }

# ---------------------------------------------- ACTION HANDLERS ------------------------------------------- #
def action_list(ser, args):
    args.repeat = 1
    
    print("Actions list:")
    for action in action_descriptions:
        print("  ", action, "\t", action_descriptions[action])

def action_read(ser, args):
    if args.first_exec:
        args.output.write("time,voltage,current,power,voltageDP,voltageDM\n")
        args.first_exec = False
    
    ser.write(b"Get Meter Data")

    voltage = struct.unpack("f", ser.read(4))[0]
    current = struct.unpack("f", ser.read(4))[0]
    power = struct.unpack("f", ser.read(4))[0]
    voltageDP = struct.unpack("f", ser.read(4))[0]
    voltageDM = struct.unpack("f", ser.read(4))[0]

    args.output.write("{0},{1},{2},{3},{4},{5}\n".format(args.timestamp, voltage, current, power, voltageDP, voltageDM))
    
# action handlers in a dictionary
action_handlers = { "list" : action_list, "read" : action_read }
# ---------------------------------------------------------------------------------------------------------------------- #

# ------------------------------------------ CUSTOM ARG. ACTION ------------------------------------------ #
class repeat_arg_action(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        if values < -1:
            raise parser.error("repeat must be in [-1, inf[")
        
        setattr(namespace, self.dest, values)

class time_arg_action(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        if values < 0.02:
            raise parser.error("time must be in [0.02, inf[")
        
        setattr(namespace, self.dest, values)
# ---------------------------------------------------------------------------------------------------------------------- #

def main():
    
    # -------------------------------------- OPTION PARSING
    parser = argparse.ArgumentParser(description="Program to interact with the AVHzY CT-2 power meter")
    parser.add_argument("action",
                        metavar="action", choices=actions,
                        help="The action to perform [choices: %(choices)s]")
    parser.add_argument("-d", "--device",
                        default="/dev/ttyACM0",
                        help="Path to the device [default: %(default)s]")
    parser.add_argument("-r", "--repeat",
                        type=int, default=-1, action=repeat_arg_action,
                        help="How many times to repeat the operation. Must be in [-1, inf[ (-1: infinite) [default: %(default)s]")
    parser.add_argument("-t", "--time",
                        type=float, default=2, action=time_arg_action,
                        help="The time (in seconds) to wait between each action iteration. Must be in [0, inf[ [default: %(default)s]")
    parser.add_argument("-o", "--output",
                        default="-", type=argparse.FileType('w'),
                        help="Where to write output of the action [default: stdout]")
    args = parser.parse_args()

    # -------------------------------------- SERIAL PORT OPENING
    ser = serial.Serial(args.device)
    # TODO:  Set Baud rate and stuff (needed? python defaults are working on my device)

    # -------------------------------------- ACTION LOOP
    setattr(args, "first_exec", True)
    setattr(args, "timestamp", 0)
    
    count = 0
    while count != args.repeat:
        action_handlers[args.action](ser, args)
        if args.repeat != -1:
            count += 1
        if count != args.repeat:
            try:
                time.sleep(args.time)
            except KeyboardInterrupt:
                break
            args.timestamp += args.time

    ser.close();
    args.output.close();

if __name__ == "__main__":
    main()
